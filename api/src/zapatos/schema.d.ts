/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **inventory**
   * - Table in database
   */
  export namespace inventory {
    export type Table = 'inventory';
    export interface Selectable {
      /**
      * **inventory.item_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('inventory_item_id_seq'::regclass)`
      */
      item_id: number;
      /**
      * **inventory.ship_to**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ship_to: string;
      /**
      * **inventory.ship_from**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ship_from: string;
      /**
      * **inventory.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **inventory.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location: string;
      /**
      * **inventory.weight**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      weight: number;
    }
    export interface JSONSelectable {
      /**
      * **inventory.item_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('inventory_item_id_seq'::regclass)`
      */
      item_id: number;
      /**
      * **inventory.ship_to**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ship_to: string;
      /**
      * **inventory.ship_from**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ship_from: string;
      /**
      * **inventory.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **inventory.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location: string;
      /**
      * **inventory.weight**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      weight: number;
    }
    export interface Whereable {
      /**
      * **inventory.item_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('inventory_item_id_seq'::regclass)`
      */
      item_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **inventory.ship_to**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ship_to?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **inventory.ship_from**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ship_from?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **inventory.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **inventory.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **inventory.weight**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      weight?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **inventory.item_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('inventory_item_id_seq'::regclass)`
      */
      item_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **inventory.ship_to**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ship_to: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **inventory.ship_from**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ship_from: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **inventory.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **inventory.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **inventory.weight**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      weight: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **inventory.item_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('inventory_item_id_seq'::regclass)`
      */
      item_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **inventory.ship_to**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ship_to?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **inventory.ship_from**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ship_from?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **inventory.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **inventory.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **inventory.weight**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
      weight?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'inventory_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **locations**
   * - Table in database
   */
  export namespace locations {
    export type Table = 'locations';
    export interface Selectable {
      /**
      * **locations.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location: string;
      /**
      * **locations.num_items**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      num_items: number;
    }
    export interface JSONSelectable {
      /**
      * **locations.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location: string;
      /**
      * **locations.num_items**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      num_items: number;
    }
    export interface Whereable {
      /**
      * **locations.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **locations.num_items**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      num_items?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **locations.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **locations.num_items**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      num_items?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **locations.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **locations.num_items**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      num_items?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'locations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = inventory.Table | locations.Table;
  export type Selectable = inventory.Selectable | locations.Selectable;
  export type JSONSelectable = inventory.JSONSelectable | locations.JSONSelectable;
  export type Whereable = inventory.Whereable | locations.Whereable;
  export type Insertable = inventory.Insertable | locations.Insertable;
  export type Updatable = inventory.Updatable | locations.Updatable;
  export type UniqueIndex = inventory.UniqueIndex | locations.UniqueIndex;
  export type Column = inventory.Column | locations.Column;
  export type AllBaseTables = [inventory.Table, locations.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [inventory.Table, locations.Table];


  export type SelectableForTable<T extends Table> = {
    inventory: inventory.Selectable;
    locations: locations.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    inventory: inventory.JSONSelectable;
    locations: locations.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    inventory: inventory.Whereable;
    locations: locations.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    inventory: inventory.Insertable;
    locations: locations.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    inventory: inventory.Updatable;
    locations: locations.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    inventory: inventory.UniqueIndex;
    locations: locations.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    inventory: inventory.Column;
    locations: locations.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    inventory: inventory.SQL;
    locations: locations.SQL;
  }[T];

}
